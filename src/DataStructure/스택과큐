참고자료 : [쉬운코드] https://www.youtube.com/watch?v=-2YpvLCT5F8&list=PLcXyemr8ZeoT-_8yBc_p_lVwRRqUaN8ET&index=12

Abstract Data Type vs Data Structure

ADT(Abstract Data Type)
- 추상자료형
- 개념적으로 어떤 동작이 있는지만 정의
- 구현에 대해서는 다루지 않음


DS(Data Structure)
- 자료구조
- ADT에서 정의된 동작을 실제로 구현한 것


이번에는 stack & queue를 ADT의 관점에서 다룸 -> 구현은 설명 X

스택(stack)
- LIFO(Last In First Out) 형태로 데이터를 저장하는 구조

스택 주요 동작
- push
- pop
- peek

큐(queue)
- FIFO(First In First Out) 형태로 데이터를 저장하는 구조

큐 주요 동작
- enqueue
- dequeue
- peek

스택과 큐 사용 사례
스택 사용 사례 : stack memory & stack frame
큐 사용 사례 : producer/consumer architecture

기술 문서에서 큐를 만났을 때
-> 항상 FIFO를 의미하지 않음

ex)
CPU(P1,P2,P3 프로세스 3개를 실행하는 상황) 싱글 코어 == 멀티태스킹
P1_P2_P3_P1_P2_P3 컨텍스트 스위칭이 일어나면서 계속 프로세스를 바꿔준다.
그럼 동작중인 프로세스가 아니라 기다리는 프로세스는 ready queue라는 큐에 들어간다
이때 ready queue는 FIFO 큐가 아니라 priority queue이다.

스택/큐 관련 에러와 해결 방법

StackOverFlowError : 스택 메모리 공간을 다 썼을 때 발생하는 에러
-> 대부분 재귀함수(recursive function)에서 탈출 못해서 발생 -> 재귀함수의 탈출 조건을 다시 설정(depth가 너무 깊으면 다른 방법)

OutOfMemoryError : Java의 힙(heap) 메모리를 다 썼을 때 발생
-> 큐에 데이터가 계속 쌓이기만 한다면 발생 -> 큐에 사이즈를 고정한다.

그렇다면 큐가 다 찼다면 어떻게 할건가?
- 예외(exception) throw
- 특별한 값(null or false)을 반환
- 성공할 때까지 영원히 스레드 블락(block)
- 제한된 시간만 블락되고 그래도 안되면 포기

-> 4가지 방식을 지원하는 자바의 큐 LinkedBlockingQueue
