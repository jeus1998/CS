
자료 : [쉬운코드] https://www.youtube.com/watch?v=LgEY4ghpTJI&list=PLcXyemr8ZeoT-_8yBc_p_lVwRRqUaN8ET&index=16

- CPU scheduler & dispatcher 차이
- 스케줄링 선점 방식
- 다양한 스케줄링 알고리즘

scheduler 역할
프로세스/스레드가 항상 놀지 않고 일을 하도록 선택하는 작업을 한다.

어떤 프로세스/스레드가 running 상태에서 (waiting or ready or terminated)로 상태가 바뀔 수 있다.
그럼 이때 cpu는 비워져있다. 비워져있는 cpu를 다른 프로세스가 바로 이어서 실행될 수 있도록 해야 하는데
어떤 프로세스가 진행할 것인지를 선택한 작업을 스케줄러가 한다.

ready queue - ready 상태인 프로세스를 모아놓은 큐

CPU scheduler 정리 - CPU에서 실행될 프로세스를 선택하는 역할

dispatcher - CPU scheduler가 선택한 프로세스를 실행 되도록 만드는 작업
dispatcher 하는일
- context switching은 매우 민감한 작업이다. 유저 모드 -> 커널 모드
- context switching(컨텍스트 스위칭) 이전 프로세스 -> 다음 프로세스 (프로세스 교체)
- context switching을 마치고 다시 커널 모드 -> 유저 모드
- 교체된 프로세스가 어디서부터 작업을 시작해야 하는지 -> 적절한 위치로 이동 시키기

Dispatcher 정리 - 선택된 프로세스에게 CPU를 할당하는 역할

스케줄링의 선점 방식
- NonPreemptive scheduling(비선점 스케줄링)
- Preemptive scheduling(선점 스케줄링)

NonPreemptive scheduling(비선점 스케줄링)
1. 자발적으로 진행되던 프로세스가 스스로 running -> ready 상태
2. running -> terminated(종료)
3. running -> waiting(IO 작업)

비선점이라고 표현하는 이유는 running state 프로세스가 자발적으로 running 상태에서 빠져나가기 때문이다.
운영체제가 강제적으로 하는게 아니다.

NonPreemptive scheduling 특징
- 신사적
- 협력적(cooperative)
- 느린 응답성 -> 만약 느린 프로세스가 계속해서 running 상태라면 기존에 실행하던 프로세스들은 계속해서 ready queue에서 대기

Preemptive scheduling(선점 스케줄링)
1. NonPreemptive scheduling이 하는일을 다 한다.
2. running 중이던 프로세스가 time slices(CPU 점유 시간)를 다 사용해서 running -> ready os 개입
3. ready queue에 있는 프로세스가 running state 프로세스 보다 우선순위가 높은 경우 os 개입

Preemptive scheduling 특징
- 적극적
- 강제적
- 빠른 응답성
- 데이터 일관성 문제 - 진행중이던 프로세스가 갑자기 ready 상태로 바뀌기 때문에 -> mutex lock / critical section 사용해서 방지

스케줄링 알고리즘
스케줄링 알고리즘이란? - ready queue에 있는 프로세스들을 어떤 기준으로 선택을 할 것인지 기준

FCFS(first-come, first-served)
- 먼저 도착한 순서대로 처리

SJF(shortest-job-first)
- 프로세스의 다음 CPU burst가 가장 짧은 프로세스부터 실행

SRTF(shortest-remaining-time-first)
- 남은 CPU burst가 가장 짧은 프로세스부터 실행

Priority
- 우선순위가 높은 프로세스부터 실행

RR(round-robin)
- time slice로 나눠진 CPU time을 번갈아가며 실행

Multilevel queue
-프로세스들을 그룹화해서 그룹마다 큐를 두는 방식


선점형 스케줄링 (Preemptive Scheduling)
선점형 스케줄링에서는 현재 실행 중인 프로세스가 일정 시간(타임 퀀텀) 동안만 CPU를 사용할 수 있으며, 이 시간이 지나면 강제로 CPU를 다른 프로세스에게 넘겨줍니다. 또한, 우선순위가 높은 프로세스가 도착하면 현재 실행 중인 프로세스가 강제로 CPU를 넘겨줄 수도 있습니다.

주요 선점형 스케줄링 알고리즘:
선점형 우선순위 스케줄링 (Preemptive Priority Scheduling)
라운드 로빈 (Round Robin)
최단 남은 시간 우선 (Shortest Remaining Time First, SRTF)
비선점형 스케줄링 (Non-preemptive Scheduling)
비선점형 스케줄링에서는 한 프로세스가 CPU를 점유하면, 해당 프로세스가 종료되거나 I/O 작업을 위해 CPU를 스스로 반납할 때까지 계속 CPU를 점유합니다. 즉, 중간에 다른 프로세스가 CPU를 빼앗지 않습니다.

주요 비선점형 스케줄링 알고리즘:
비선점형 우선순위 스케줄링 (Non-preemptive Priority Scheduling)
최단 작업 우선 (Shortest Job First, SJF)
FCFS (First-Come, First-Served)


