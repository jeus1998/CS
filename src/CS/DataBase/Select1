

참고 자료 : [쉬운 코드] https://www.youtube.com/watch?v=dTBwgWMUguE&list=PLcXyemr8ZeoREWGhhZi5FZs6cvymjIBVe&index=5

- (1부) SQL로 데이터 조회하기!

---------------------------------------------------------------------------

select name, position from employee where id = 9;

selection condition : 검색하고 싶은 튜플의 조건 ex)  where id = 9;

projection attributes : 내가 관심있는 속성 ex) name, position

---------------------------------------------------------------------------

SELECT statement 정리

SELECT attributes(s)
FROM table(s)
[WHERE condition(s) ];

---------------------------------------------------------------------------
- project 2002를 리딩(leading)하고 있는 임직원 ID와 이름과 직군을 알고 싶다.

PROJECT (프로젝트)
id, name, leader_id, start_date, end_date

EMPLOYEE (직원)
id, name, birth_data, sex, position, salary, dept_id

1. project의 leader_id는 employee의 id를 reference

2. 관심있는 attributes : employee id,name,position

select employee.id, employee.name, position
from project, employee
where project.id = 2002 and project.leader_id = employee.id;

selection condition : project.id = 2002
join condition : project.leader_id = employee.id 두 테이블을 연결 해주는 조건
projection attributes : employee.id, employee.name, employee.position

왜 table 이름을 적을까?
employee.id, project.leader_id .....

두 테이블에 같은 attribute가 있다고 하면 어떤 테이블에 해당하는 attribute인지 알 수 있는 방법이 없다.
그래서 table 이름을 명시한다.

position 같은 경우 employee만 있는 attribute 이름이 겹치지 않아서 명시 x
하지만 명시해도 문제는 없다. employee.position

-------------------------------------------------------------------------------------
AS 사용하기

- AS는 테이블이나 attribute에 별칭(alias)을 붙일 때 사용한다.
- AS는 생략 가능하다.

select employee.id, employee.name, position
from project, employee
where project.id = 2002 and project.leader_id = employee.id;

쿼리문에서 테이블 이름을 명시하는 일이 너무 귀찮다. or sql 쿼리가 너무 길어진다.

select e.id, e.name, e.position
from project AS p, employee AS e
where p.id = 2002 and p.leader_id = e.id;

select 실행 결과를 as를 통해서 별칭을 붙여서 보이기

select e.id as leader_id, e.name as leader_name , e.position as leader_position
from project AS p, employee AS e
where p.id = 2002 and p.leader_id = e.id;

	leader_id	leader_name	leader_position
	14	        SAM	        DEV_INFRA

----------------------------------------------------------------------------------------
DISTINCT 사용하기

- 디자이너들이 참여하고 있는 프로젝트들의 ID와 이름을 알고 싶다

EMPLOYEE (직원)
id, name, birth_data, sex, position, salary, dept_id

WORKS_ON
empl_id, proj_id

PROJECT (프로젝트)
id, name, leader_id, start_date, end_date

employee 테이블에서 position이 'DSGN' 인 id를 통해
works_on proj_id를 얻고
해당 proj_id를 통해 이름을 알아낸다.

select p.id, p.name
from project p, works_on w, employee e
where e.position = 'DSGN' and e.id = w.empl_id and w.proj_id = p.id;

-> 중복된 결과가 나온다.

p.id & p.name 조합에 대한 튜플의 중복을 제거

select distinct p.id, p.name
from project p, works_on w, employee e
where e.position = 'DSGN' and e.id = w.empl_id and w.proj_id = p.id;

-------------------------------------------------------------------------------
LIKE 사용하기

- 이름이 N으로 시작하거나 N으로 끝나는 임직원들의 이름을 알고 싶다.
select name
from employee
where name like 'N%' or name like '%N';

- 이름에 NG가 들어간 임직원들의 이름
select name
from employee
where name like '%NG%';

- 이름이 J로 시작하는, 총 네 글자의 이름을 가지는 임직원들의 이름을 알고 싶다.
select name
from employee
where name like 'J___';

------------------------------------------------------------------------------------
ESCAPE 문자와 함께 LIKE 사용하기

- %로 시작하거나, _로 끝나는 프로젝트를 찾고 싶다면?

select * from project
where name like '\%%' or name like '%\_';

ESCAPE -> \

--------------------------------------------------------------------------------------
LIKE 정리

- 문자열 pattern matching에 사용

reserved character
% : 0개 이상의 임의의 개수를 가지는 문자들을 의미
_ : 하나의 문자를 의미

escape character
\ : 예약 문자를 escape시켜서 문자 본연의 문자로 사용하고 싶을 때 사용


----------------------------------------------------------------------------------------
* (asterisk) 사용하기

- ID가 9인 임직원의 모든 attributes를 알고 싶다.

select *
from employee
where employee.id = 9;

기존 쿼리
select employee.id, employee.name, position
from project, employee
where project.id = 2002 and project.leader_id = employee.id;

->
select *
from project, employee
where project.id = 2002 and project.leader_id = employee.id;

project & employee table 2개에서 해당 조건이 맞는 튜플의 모든 attribute를 가져온다.
id       name        leader_id  start_date  end_date    id  name  birth_date   sex  position    salary    dept_id
2002	web_security	14	    2024-05-27	2024-05-28	14	SAM	  1992-08-04	M	DEV_INFRA	280000000	1003

-----------------------------------------------------------------------------------------------------------
주의 사항!!!

SELECT로 조회할 때 조건들을 포함해서 조회를 한다면
이 조건들과 관련된 attributes에 index가 걸려있어야 한다.
그렇지 않다면 데이터가 많아질수록 조회 속도가 느려진다.

SELECT * FROM EMPLOYEE WHERE POSITION = 'dev_back';



