
참고 자료 : [쉬운코드] https://www.youtube.com/watch?v=B4Of4UgLfWc&list=PLcXyemr8ZeoT-_8yBc_p_lVwRRqUaN8ET&index=19

- 스레드 풀(thread pool)
- 스레드 풀 사용할 때 팁

Thread per request model

request : thread   (1:1 매핑)

만약 thread per request model 동작 방식이
서버에 들어오는 요청마다 스레드를 새로 만들어서 처리하고 처리가 끝난 스레드는 버리는 식으로 동작한다면
어떤 문제점이 있을까?

-> 스레드 생성에 소요되는 시간 때문에 요청 처리가 더 오래 걸림

-> 처리 속도보다 더 빠르게 요청이 늘어나면
   -> 스레드가 계속 생성(스레드 수 증가) -> 메모리가 점점 고갈됨
   -> 컨텍스트 스위칭이 더 자주 발생
   -> cpu 오버헤드 증가로 cpu time 낭비
   -> 어느 순간 서버 전체가 응답 불가능 상태에 빠짐

Thread pool 등장

요청들 -> Queue 저장 -> 요청을 queue에서 꺼냄 -> 스레드풀에서 미리 만들어 놓은(제한된 개수) 스레드에 매핑 1:1 매핑
-> 스레드 요청 처리 -> 스레드를 버리는게 아닌 다시 스레드풀에 넣는다.

특징
- 미리 스레드를 여러 개 만들어 놓고 재사용 -> 스레드 생성 시간 절약
- 제한된 개수의 스레드를 운용 -> 스레드가 무제한으로 생성되는 것을 방지

Thread pool 사례 : 여러 작업을 동시에 처리해야할 때
- thread per request model
- task를 subtask로 나뉘어서 동시에 처리
- 순서 상관없이 동시 실행이 가능한 task 처리


--> 이제 ThreadPoolTip.java 넘어가자










