
- 참고자료 : [쉬운코드] https://www.youtube.com/watch?v=vorIqiLM7jc&list=PLcXyemr8ZeoT-_8yBc_p_lVwRRqUaN8ET&index=18

- 스레드 종류, 개념 이해
- 하드웨어 스레드
- os 스레드
- 네이티브 스레드
- 커널 스레드
- 유저 스레드
- 그린 스레드

3level(user level, os level, hw level)

   User Program
------------------
    OS kernel     (하드웨어 관리 및 시스템 전반 관리)
------------------
Memory CPU Devices (하드웨어)

우리가 개발한 프로그램은 OS를 통해서 하드웨어를 사용한다.

-------------------------------------------------------------------------------------------------
Hardware Thread

코어(core)의 고민
메모리에서 데이터를 기다리는 시간이 꽤 오래 걸린다
-> 메모리를 기다리는 동안 다른 스레드를 실행하는건 어떨까?

cpu core에서 우리가 작성한 프로그램이 compute 작업을 하고 있는데 memory에 접근해야 하는 일이 생긴다.
이때 core는 아무일도 하지 않는다.

core : compute(연산) -> memory(do nothing) -> compute -> memory(do nothing) -> ....

core 낭비가 아니냐라는 의견이 나온다.
그래서 memory에 접근하는 동안 다른 작업을 하자

core : compute -> memory -> compute -> memory -> ....
                  compute -> memory -> compute -> ....

core는 1개지만 2개의 서로 다른 스레드를 실행 시켜서 cpu 사용률을 극대화
이 서로 다른 2개의 스레드를 -> Hardware Thread

인텔의 hyper-threading
물리적인 코어마다 하드웨어 스레드가 두 개

정리 - Hardware Thread
OS 관점에서는 가상의(logical) 코어

만약 싱글 코어 cpu에 하드웨어 스레드가 두 개라면
OS는 이 CPU를 듀얼 코어로 인식하고 듀얼 코어에 맞춰서 OS 레벨의 스레드들을 스케줄링 한다.

퀴즈
인텔 듀얼 코어 CPU에 hyper-threading이 적용 됐다면 하드웨어 스레드는 총 몇 개?
-> 4개 -> OS는 core4개인 cpu로 인식 ㄷㄷ

----------------------------------------------------------------------------------------------
OS thread

우리가 지금까지 알고 있던 스레드 개념 == OS thread

커널(kernel)
- 운영체제의 핵심
- 시스템 전반을 관리/감독하는 역할
- 하드웨어 관련된 작업을 직접 수행

OS 스레드
- OS 커널 레벨에서 생성되고 관리되는 스레드
- CPU에서 실제로 실행되는 단위, CPU 스케줄링의 단위
- OS 스레드의 컨텍스트 스위칭은 커널이 개입 -> 비용 발생
- 사용자 코드와 커널 코드 모두 OS 스레드에서 실행된다.

OS 스레드의 다른 이름들
- 네이티브(native) 스레드
- 커널 스레드
- 커널-레벨 스레드
- OS-레벨 스레드

퀴즈
OS 스레드가 8개
하이퍼 스레딩이 적용된 인텔 듀얼코어 위에서 동작한다면 OS 스레드들은 어떻게 코어에 균등하게 할당할 수 있을까?

물리적인 코어는 2개 하지만 하이퍼 스레딩이 적용 -> H.W 스레드 4개 -> OS는 코어를 4개로 인식
-> 코어 마다 2개의 스레드를 할당

--------------------------------------------------------------------------------------------------
User thread

유저 스레드는 유저-레벨 스레드라고 불리기도 한다.

유저 스레드
- 스레드 개념을 프로그래밍 레벨에서 추상화 한 것

Thread thread = new Thread();
thread.start();

start() -> start0() (JNI) -> system call (리눅스 clone)
OS 스레드와 User 스레드 연결

유저 스레드가 CPU에서 실행되려면 OS 스레드와 반드시 연결돼야 한다.

유저 스레드와 OS 스레드를 어떻게 연결시킬 것인가? -> Threading model

One-to-One model (자바)
User thread <-> Os thread 1:1 연결

One-to-One model 특징
- 스레드 관리를 OS에게 위임
- 스케줄링을 커널이 수행
- 멀티 코어를 잘 활용한다.

1:1 연결된 스레드들이 1개의 프로세스에 있는 스레드들 이라면
1개의 스레드가 block I/O를 실행해서 멈춘다고 해도 다른 스레드들은 잘 동작
하지만 race condition이 가능

Many-to-One model
User thread (many) <-> OS thread (1) m:1 연결

Many-to-One 특징
- 컨텍스트 스위칭이 더 빠르다. -> User level에서만 컨텍스트 스위칭이 발생 -> kernel 개입 x
- os level에서 race condition이 발생할 가능성은 거의 없다.
- race condition 가능성이 적다.
- 멀티 코어 활용 x
- 1개의 스레드가 block I/O 되면 다른 스레드들 모두가 block 된다.


Many-to-Many model
User thread (many) <-> OS thread (many) m:m 연결

Many-to-Many 특징
- Many-to-one의 장점과 One-to-One의 장점을 합쳐서 만든 모델
- 구현이 복잡
- Go라는 언어가 지원

--------------------------------------------------------------------------------------------------
Green Thread
Java 초창기 버전은 Many-to-One 스레딩 모델을 사용
이때 이 유저 스레드들을 그린 스레드라고 호칭

현재의 Green Thread 의미
OS와는 독립적으로 유저 레벨에서 스케줄링되는 스레드

---------------------------------------------------------------------------------------------------
Kernel Thread

OS 커널의 역할을 수행하는 스레드


---------------------------------------------------------------------------------------------------
유저 레벨에서 스케줄링되는 스레드는 코루틴(coroutine)과 관련