
참고 자료 : [쉬운코드] https://www.youtube.com/watch?v=c8WNbcxkRhY&list=PLcXyemr8ZeoREWGhhZi5FZs6cvymjIBVe&index=3

- MySQL에서 사용한 query MySQLQuery/1.sql

- SQL 기본개념
- SQL 데이터베이스 정의 방법
- table 생성
- 각종 데이터 타입
- constraints
- 키(key)

SQL 뜻
- Structured Query Language
- 현업에서 쓰이는 relational DBMS의 표준언어
- 종합적인 database 언어 : DDL + DML + VDL

SQL 주요 용어
__________________________________________
|  relational data model  |      SQL     |
|-------------------------|--------------|
|       relation          |     table    |
|-------------------------|--------------|
|       attribute         |    column    |
|-------------------------|--------------|
|       tuple             |      row     |
|-------------------------|--------------|
|       domain            |     domain   |
|-------------------------|--------------|

SQL에서 relation이란?
- multiset of tuples @SQL
- 중복된 tuple을 허용한다.

SQL & RDBMS
SQL은 RDBMS의 표준 언어이지만 실제 구현에 강제가 없기 때문에
RDBMS마다 제공하는 SQL의 스펙이 조금씩 다르다.

-> RDBMS 마다 문법이 조금씩 다르다.

예제를 통해 SQL로 DB 정의하기

IT 회사 관련 RDB 만들기
- 부서, 사원, 프로젝트 관련 정보들을 저장할 수 있는 관계형 데이터베이스를 만들자
- 사용할 RDBMS는 MySQL(InnoDB) <- db 엔진


mysql > SHOW DATABASES; // 현재 존재하는 DATABASES를 보여준다.

mysql > CREATE DATABASE company; // CREATE DATABASE 내가 만들고 싶은 데이터베이스 이름;

mysql > SHOW DATABASES; // 내가 만든 데이터베이스인 company가 보인다.

mysql > SELECT database(); // 내가 현재 선택한 데이터베이스를 보여준다. 선택한 DB가 없으면 NULL

mysql > USE company;  // 데이터베이스 선택
response : Database changed

mysql > SELECT database(); // 내가 선택한 데이터베이스 company가 보인다.

mysql > DROP DATABASE company; // 데이터베이스 삭제


DATABASE vs SCHEMA
- MySQL에서는 DATABASE와 SCHEMA가 같은 뜻을 의미
- CREATE DATABASE company = CREATE SCHEMA company
- 다른 RDBMS에서는 의미가 다르게 쓰임
- ex) PostgreSQL에서는 SCHEMA가 DATABASE의 namespace를 의미


table 정의하기

- 부서, 사원, 프로젝트 관련 정보들을 저장할 수 있는 관계형 데이터베이스를 만들자

DEPARTMENT (부서)
id, name, leader_id

EMPLOYEE (직원)
id, name, birth_data, sex, position, salary, dept_id

PROJECT (프로젝트)
id, name, leader_id, start_date, end_date

WORKS_ON
empl_id, proj_id

참조 관계 reference
DEPARTMENT leader_id -> EMPLOYEE id 참조
EMPLOYEE dept_id -> DEPARTMENT id 참조
PROJECT leader_id -> EMPLOYEE id 참조
WORKS_ON empl_id -> EMPLOYEE id 참조
WORKS_ON proj_id -> PROJECT id 참조

-----------------------------------------------------------------------------------------------------------
Attribute Data Type 설명

Attribute Data Type  : 숫자

정수
- 정수를 사용할 때 사용

정수 종류(MySQL)
사이즈 1byte : TINYINT
사이즈 2byte : SMALLINT
사이즈 3byte : MEDIUMINT
사이즈 4byte : INT or INTEGER
사이즈 8byte : BIGINT

PostgreSQL에서는 TINYINT, MEDIUMINT 존재 X -> RDBMS 마다 존재하는 데이터 타입도 모두 다르다.

부동 소수점 방식(floating-point)
- 실수(real number)를 저장할 때 사용
- 고정 소수점 방식에 비해 정확하지 않다.

부동 소수점 종류(MySQL)
사이즈 4byte : FLOAT
사이즈 8byte : DOUBLE or DOUBLE PRECISION

고정 소수점 방식(fixed-point)
- 실수를 정확하게 저장할 때 사용
- DECIMAL(5,2) => [-999.99 ~ 999.99]

DECIMAL 방식 (precision, scale)
precision : 전체 자릿수
scale : 소수점 몇 번째 자리까지 -> scale : 2 ->  0.99 (소수점 아래 2자리 까지)

고정 소수점 종류
사이즈 variable : DECIMAL or NUMERIC

SQL 표준 스펙
NUMERIC : scale 크기와 precision 크기에 맞춰서 정확하게 저장
DECIMAL : scale 크기에 벗어나도 유연하게 저장

MySQL 스펙
NUMBER, DECIMAL : 둘 다 scale 크기와 precision 크기에 맞춰서 정확하게 저장

Attribute Data Type : 문자열

고정 크기 문자열(CHAR)
- 최대 몇 개의 '문자'를 가지는 문자열을 저장할지를 지정
- 저장될 문자열의 길이가 최대 길이보다 작으면 나머지를 space로 채워서 저장
- name char(4) 일 때 다음과 같이 저장 : 'a   ', '한국  ', '고고고고', 'wow '
- 다시 읽어오면 space는 제외한 문자만 읽어온다.

MySQL -> CHAR(n) (0<= n <= 255)

가변 크기 문자열(VARCHAR)
- 최대 몇 개의 '문자'를 가지는 문자열을 저장할지를 지정
- 저장될 문자열의 크기 길이 만큼만 저장
- name varchar(4) 일 때 다음과 같이 저장 : 'a', '한국', '고고고고', 'wow'

MySQL -> VARCHAR(n) (0<=n<=65,535)

MySQL에서 VARCHAR은 storage 관점에서는 이점이 있지만 CHAR 보다 느리다. -> 전화번호 같은 경우는 길이가 고정이기 때문에 CHAR 사용

사이즈가 큰 문자열
- 사이즈가 큰 문자열을 저장할 때 사용

MySQL : TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT
PostgreSQL : TEXT

Attribute Data Type : 날짜와 시간

날짜
- 년,월,일을 저장
- YYYY-MM-DD

MySQL -> DATE('1000-01-01' ~ '9999-12-31')

시간
- 시,분,초를 저장
- hh:mm:ss or hhh:mm:ss

MySQL -> TIME('-838:59:59' ~ '838:59:59')

날짜와 시간
- 날짜와 시간을 같이 표현
- YYYY-MM-DD hh:mm:ss
- TIMESTAMP는 time-zone이 반영됨

MySQL
- DATETIME('1000-01-01 00:00:00' to '9999-12-31 23:59:59')
- TIMESTAMP('1970-01-01 00:00:01' UTC ~ '2038-01-19 03:14:07' UTC)

UTC : 표준 시간대

Attribute Data Type : 그 외

byte-string : (문자열이 아니라) byte string을 저장 - MySQL -> BINARY, VARBINARY, BLOB type
boolean : true, false 저장 - MySQL -> 따로 존재 X, TINYINT로 대체해서 사용(0,1)
위치관련 : 위치 관련 정보를 저장 - MySQL -> GEOMETRY, etc
JSON : json 형태의 데이터 저장 ex) {"name": "messi", "age": 38} - MySQL -> JSON

-----------------------------------------------------------------------------------------------------------
Key constraints : PRIMARY KEY

- table의 tuple을 식별하기 위해 사용, 하나 이상의 attribute(s)로 구성
- primary key는 중복된 값을 가질 수 없으며, NULL도 값으로 가질 수 없다.

- primary key를 선언하는 방법
1. attribute 하나로 구성될 때

create table DEPARTMENT(
      id      INT      PRIMARY KEY,
      ....
);

2. attribute 하나 이상으로 구성될 때

create table PLAYER(
      team_id VARCHAR(12),
      back_number INT,
      ...
      PRIMARY KEY(team_id, back_number)
);

--------------------------------------------------------------------------------------------------------------
Key constraints : UNIQUE

- UNIQUE로 지정된 attribute(s)는 중복된 값을 가질 수 없다.
- 단, NULL은 중복을 허용할 수도 있다.(RDBMS 마다 다름) MySQL은 허용

- UNIQUE 를 선언하는 방법

1. attribute 하나로 구성될 때

create table DEPARTMENT(
      id      INT      UNIQUE
      ....
);

2. attribute 하나 이상으로 구성될 때

create table PLAYER(
      team_id VARCHAR(12),
      back_number INT,
      ...
      UNIQUE(team_id, back_number)
);

--------------------------------------------------------------------------------------------------------------
NOT NULL constraint

- attribute가 NOT NULL로 지정되면 해당 attribute는 NULL을 값으로 가질 수 없다.
- NOT NULL 선언은 attribute level 에서만 가능

create table DEPARTMENT(
      id      INT    NOT NULL, UNIQUE,
      ....
);

---------------------------------------------------------------------------------------------------------------
attribute DEFAULT

- attribute의 default 값을 정의할 때 사용
- 새로운 tuple을 저장할 때 해당 attribute에 대한 값이 없다면 default 값으로 저장

create table Orders(
      ...
      menu varchar(15) DEFAULT '짜장면',
      ....
);

---------------------------------------------------------------------------------------------------------------
CHECK constraint

- attribute의 값을 제한하고 싶을 때 사용

1. attribute 하나로 구성될 때

create table EMPLOYEE(
      ....
      age INT CHECK(age>=20)
      ....
);

2. attribute 하나 이상으로 구성될 때

create table PROJECT(
      ....
      start_date DATE,
      end_date DATE,
      ....
      CHECK (start_date < end_date)
);

--------------------------------------------------------------------------------------------------------------
Referential integrity constraint : FOREIGN KEY

- attribute(s)가 다른 table의 primary key나 unique key를 참조할 때 사용
- foreign key가 참조하는 key(primary or unique)는 무조건 존재해야 한다.

ex) employee table deparment_id(foreign key) 1 -> department table (id)primary key 1 무조건 존재

- foreign key 선언 방법

create table EMPLOYEE(
	....
    dept_id INT,
    foreign key (dept_id)
         references DEPARTMENT(id)
		 on delete reference_option
         on update reference_option
);

reference_option
CASCADE : 참조값의 삭제/변경을 그대로 변경
SET NULL : 참조값이 삭제/변경 시 NULL로 변경
RESTRICT : 참조값이 삭제/변경되는 것을 금지 -> DEPARTMENT 의 key에 걸리는 제약
NO ACTION : RESTRICT과 유사
- 트랜잭션 범위에서는 변경이 허용이지만 트랜잭션이 끝나는데도 Referential integrity constraint 위반하면 변경 금지
SET DEFAULT : 참조값이 삭제/변경 시 default 값으로 변경

MySQL 지원 reference_option -> CASCADE, SET NULL, RESTRICT

ex)
create table EMPLOYEE(
	....
    dept_id INT,
    foreign key (dept_id) references DEPARTMENT(id)
		 on delete SET null on update CASCADE, # delete -> null , update -> cascade
         check (salary >= 50000000)
);

-------------------------------------------------------------------------------
constraint 이름 명시하기

- 이름을 붙이면 어떤 constraint을 위반했는지 쉽게 파악할 수 있다.
- constraint를 삭제하고 싶을 때 해당 이름으로 삭제 가능

EX)
create table TEST(
    age INT CONSTRAINT age_over_20 CHECK (age > 20)
);

 CONSTRAINT age_over_20 이름을 붙였을 때 -> Check constraint 'age_over_20' is violated
 CONSTRAINT age_over_20 이름을 생략했을 때 -> Check constraint 'test_chk_1' is violated

-------------------------------------------------------------------------------------

- 부서, 사원, 프로젝트 관련 정보들을 저장할 수 있는 관계형 데이터베이스를 만들자

DEPARTMENT (부서)
id, name, leader_id

EMPLOYEE (직원)
id, name, birth_data, sex, position, salary, dept_id

PROJECT (프로젝트)
id, name, leader_id, start_date, end_date

WORKS_ON
empl_id, proj_id

참조 관계 reference
DEPARTMENT leader_id -> EMPLOYEE id 참조
EMPLOYEE dept_id -> DEPARTMENT id 참조
PROJECT leader_id -> EMPLOYEE id 참조
WORKS_ON empl_id -> EMPLOYEE id 참조
WORKS_ON proj_id -> PROJECT id 참조

DEPARTMENT Table 만들기
create table DEPARTMENT(
      id      INT         PRIMARY KEY,
      name    VARCHAT(20)  NOT NULL  UNIQUE,
      leader_id INT
);

EMPLOYEE Table 만들기
create table EMPLOYEE(
	id INT primary key,
    name VARCHAR(30) NOT NULL ,
    birth_date DATE,
    sex CHAR(1)  CHECK(sex in('M','F')),
    salary INT DEFAULT 50000000,
    dept_id INT,
    foreign key (dept_id) references DEPARTMENT(id)
		 on delete SET null on update CASCADE,
         check (salary >= 50000000)
);

# PROJECT Table 만들기
create table PROJECT(
	id INT primary key,
    name VARCHAR(30) NOT NULL unique,
    leader_id INT,
    start_date DATE,
    end_date DATE,
    CONSTRAINT start_date_end_date check(start_date < end_date),
	foreign key (leader_id) references EMPLOYEE(id)
		on delete SET null on update CASCADE
);

#WORKS_ON Table 만들기
create table WORKS_ON(
         empl_id INT,
         proj_id INT,
         primary key (empl_id, proj_id),
         foreign key (empl_id) references EMPLOYEE(id)
             on delete CASCADE on update CASCADE,
         foreign key (proj_id) references PROJECT(id)
             on delete CASCADE on update CASCADE
);

이렇게 4개의 테이블을 만들었다 하지만 아직 문제점이 있다.

DEPARTMENT 테이블을 보면 leader_id가 EMPLOYEE id를 참조하는 부분이 없다.
-> DEPARTMENT 테이블 생성 당시 EMPLOYEE 테이블이 없었기 때문에
-> 스키마(table) 속성을 update 하자

ALTER TABLE
- table의 schema를 변경하고 싶을 때 사용

attribute 추가 : ALTER TABLE employee ADD blood VARCHAR(2);
attribute 이름 변경 : ALTER TABLE employee RENAME COLUMN phone TO phone_num;
attribute 타입 변경 : ALTER TABLE employee MODIFY COLUMN blood CHAR(2);
table 이름 변경 : ALTER TABLE logs RENAME TO backend_logs;
primary key 추가 : ALTER TABLE log ADD PRIMARY KEY (id);

이미 서비스 중인 table의 schema를 변경하는 것이라면
변경 작업 때문에 서비스의 백엔드에 영향이 없을지 검토한 후에 변경하는 것이 중요

#ALTER TABLE 사용해서 DEPARTMENT leader_id에 EMPLOYEE reference 추가하기
ALTER TABLE DEPARTMENT ADD foreign key(leader_id)
	references EMPLOYEE(id)
    on update cascade
    on delete SET NULL;

DROP TABLE
- table 삭제할 때 사용
- DROP TABLE table_name;

database 구조를 정의할 때 중요한 점

만들려는 서비스의 스펙과 데이터 일관성, 편의성, 확장성 등등을 종합적으로 고려하여
DB 스키마를 적절하게 정의하는 것이 중요하다
